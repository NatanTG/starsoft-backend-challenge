services:
  api:
    container_name: ecommerce_api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - kafka
      - elasticsearch
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/metrics"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./postgres-healthcheck.sh:/usr/local/bin/postgres-healthcheck.sh
    restart: unless-stopped
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "bash", "/usr/local/bin/postgres-healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: ecommerce_zookeeper
    env_file:
      - .env
    environment:
      ALLOW_ANONYMOUS_LOGIN: ${ZOOKEEPER_ALLOW_ANONYMOUS_LOGIN}
      ZOO_SERVER_ID: ${ZOOKEEPER_SERVER_ID}
      ZOO_SERVERS: ${ZOOKEEPER_SERVERS}
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - ecommerce_network

  kafka:
    image: bitnami/kafka:3.5
    container_name: ecommerce_kafka
    depends_on:
      - zookeeper
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR}
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_MIN_ISR}
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR}
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS}
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_MESSAGE_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
      KAFKA_CFG_REPLICA_FETCH_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
      KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
    ports:
      - "9092:9092"
      - "29092:29092"
    restart: unless-stopped
    networks:
      - ecommerce_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce_elasticsearch
    env_file:
      - .env
    environment:
      - node.name=${ELASTICSEARCH_NODE_NAME}
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
      - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE}
      - bootstrap.memory_lock=${ELASTICSEARCH_MEMORY_LOCK}
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED}
      - xpack.security.enrollment.enabled=${ELASTICSEARCH_SECURITY_ENABLED}
      - "ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    networks:
      - ecommerce_network

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ecommerce_prometheus
    env_file:
      - .env
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME}'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - ecommerce_network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: ecommerce_grafana
    env_file:
      - .env
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: ${GRAFANA_ALLOW_SIGN_UP}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - ecommerce_network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  ecommerce_network:
    driver: bridge
